// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "threelayer/models"

	gomock "github.com/golang/mock/gomock"
)

// MockStudentService is a mock of StudentService interface.
type MockStudentService struct {
	ctrl     *gomock.Controller
	recorder *MockStudentServiceMockRecorder
}

// MockStudentServiceMockRecorder is the mock recorder for MockStudentService.
type MockStudentServiceMockRecorder struct {
	mock *MockStudentService
}

// NewMockStudentService creates a new mock instance.
func NewMockStudentService(ctrl *gomock.Controller) *MockStudentService {
	mock := &MockStudentService{ctrl: ctrl}
	mock.recorder = &MockStudentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentService) EXPECT() *MockStudentServiceMockRecorder {
	return m.recorder
}

// GetStudentById mocks base method.
func (m *MockStudentService) GetStudentById(arg0 context.Context, arg1 int) (*models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentById", arg0, arg1)
	ret0, _ := ret[0].(*models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentById indicates an expected call of GetStudentById.
func (mr *MockStudentServiceMockRecorder) GetStudentById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentById", reflect.TypeOf((*MockStudentService)(nil).GetStudentById), arg0, arg1)
}

// GetStudents mocks base method.
func (m *MockStudentService) GetStudents(arg0 context.Context) ([]models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudents", arg0)
	ret0, _ := ret[0].([]models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudents indicates an expected call of GetStudents.
func (mr *MockStudentServiceMockRecorder) GetStudents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudents", reflect.TypeOf((*MockStudentService)(nil).GetStudents), arg0)
}

// PostStudent mocks base method.
func (m *MockStudentService) PostStudent(arg0 context.Context, arg1 models.StudentReq) (*models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostStudent", arg0, arg1)
	ret0, _ := ret[0].(*models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostStudent indicates an expected call of PostStudent.
func (mr *MockStudentServiceMockRecorder) PostStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostStudent", reflect.TypeOf((*MockStudentService)(nil).PostStudent), arg0, arg1)
}
